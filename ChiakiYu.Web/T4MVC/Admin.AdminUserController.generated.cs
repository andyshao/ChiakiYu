// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace ChiakiYu.Web.Areas.Admin.Controllers
{
    public partial class AdminUserController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AdminUserController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult GetPermissions()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetPermissions);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminUserController Actions { get { return MVC.Admin.AdminUser; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "AdminUser";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "AdminUser";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ManageUsers = "ManageUsers";
            public readonly string EidtUser = "EidtUser";
            public readonly string ManageRoles = "ManageRoles";
            public readonly string SetRoles = "SetRoles";
            public readonly string ChangePermissions = "ChangePermissions";
            public readonly string GetPermissions = "GetPermissions";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ManageUsers = "ManageUsers";
            public const string EidtUser = "EidtUser";
            public const string ManageRoles = "ManageRoles";
            public const string SetRoles = "SetRoles";
            public const string ChangePermissions = "ChangePermissions";
            public const string GetPermissions = "GetPermissions";
        }


        static readonly ActionParamsClass_ManageUsers s_params_ManageUsers = new ActionParamsClass_ManageUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ManageUsers ManageUsersParams { get { return s_params_ManageUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ManageUsers
        {
            public readonly string pageIndex = "pageIndex";
            public readonly string pageSize = "pageSize";
        }
        static readonly ActionParamsClass_EidtUser s_params_EidtUser = new ActionParamsClass_EidtUser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EidtUser EidtUserParams { get { return s_params_EidtUser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EidtUser
        {
            public readonly string userId = "userId";
        }
        static readonly ActionParamsClass_ManageRoles s_params_ManageRoles = new ActionParamsClass_ManageRoles();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ManageRoles ManageRolesParams { get { return s_params_ManageRoles; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ManageRoles
        {
            public readonly string pageIndex = "pageIndex";
            public readonly string pageSize = "pageSize";
        }
        static readonly ActionParamsClass_SetRoles s_params_SetRoles = new ActionParamsClass_SetRoles();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetRoles SetRolesParams { get { return s_params_SetRoles; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetRoles
        {
            public readonly string userId = "userId";
        }
        static readonly ActionParamsClass_ChangePermissions s_params_ChangePermissions = new ActionParamsClass_ChangePermissions();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePermissions ChangePermissionsParams { get { return s_params_ChangePermissions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePermissions
        {
            public readonly string roleId = "roleId";
        }
        static readonly ActionParamsClass_GetPermissions s_params_GetPermissions = new ActionParamsClass_GetPermissions();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetPermissions GetPermissionsParams { get { return s_params_GetPermissions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetPermissions
        {
            public readonly string roleId = "roleId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string ChangePermissions = "ChangePermissions";
                public readonly string EidtUser = "EidtUser";
                public readonly string ManageRoles = "ManageRoles";
                public readonly string ManageUsers = "ManageUsers";
                public readonly string SetRoles = "SetRoles";
            }
            public readonly string ChangePermissions = "~/Areas/Admin/Views/AdminUser/ChangePermissions.cshtml";
            public readonly string EidtUser = "~/Areas/Admin/Views/AdminUser/EidtUser.cshtml";
            public readonly string ManageRoles = "~/Areas/Admin/Views/AdminUser/ManageRoles.cshtml";
            public readonly string ManageUsers = "~/Areas/Admin/Views/AdminUser/ManageUsers.cshtml";
            public readonly string SetRoles = "~/Areas/Admin/Views/AdminUser/SetRoles.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AdminUserController : ChiakiYu.Web.Areas.Admin.Controllers.AdminUserController
    {
        public T4MVC_AdminUserController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ManageUsersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int pageIndex, int pageSize);

        [NonAction]
        public override System.Web.Mvc.ActionResult ManageUsers(int pageIndex, int pageSize)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ManageUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageIndex", pageIndex);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageSize", pageSize);
            ManageUsersOverride(callInfo, pageIndex, pageSize);
            return callInfo;
        }

        [NonAction]
        partial void EidtUserOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long userId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EidtUser(long userId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EidtUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            EidtUserOverride(callInfo, userId);
            return callInfo;
        }

        [NonAction]
        partial void EidtUserOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult EidtUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EidtUser);
            EidtUserOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ManageRolesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int pageIndex, int pageSize);

        [NonAction]
        public override System.Web.Mvc.ActionResult ManageRoles(int pageIndex, int pageSize)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ManageRoles);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageIndex", pageIndex);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pageSize", pageSize);
            ManageRolesOverride(callInfo, pageIndex, pageSize);
            return callInfo;
        }

        [NonAction]
        partial void SetRolesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long userId);

        [NonAction]
        public override System.Web.Mvc.ActionResult SetRoles(long userId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetRoles);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            SetRolesOverride(callInfo, userId);
            return callInfo;
        }

        [NonAction]
        partial void SetRolesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult SetRoles()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SetRoles);
            SetRolesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangePermissionsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int roleId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangePermissions(int roleId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePermissions);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "roleId", roleId);
            ChangePermissionsOverride(callInfo, roleId);
            return callInfo;
        }

        [NonAction]
        partial void GetPermissionsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int roleId);

        [NonAction]
        public override System.Web.Mvc.JsonResult GetPermissions(int roleId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetPermissions);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "roleId", roleId);
            GetPermissionsOverride(callInfo, roleId);
            return callInfo;
        }

        [NonAction]
        partial void ChangePermissionsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Web.Mvc.JsonResult ChangePermissions()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ChangePermissions);
            ChangePermissionsOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
